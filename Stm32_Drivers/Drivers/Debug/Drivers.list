
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004fc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  0800062c  0800062c  0001062c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000634  08000634  0001063c  2**0
                  CONTENTS
  4 .ARM          00000000  08000634  08000634  0001063c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000634  0800063c  0001063c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000634  08000634  00010634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000638  08000638  00010638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001063c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  0800063c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800063c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001063c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001343  00000000  00000000  00010665  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000003f1  00000000  00000000  000119a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000664  00000000  00000000  00011d99  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000128  00000000  00000000  00012400  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000e0  00000000  00000000  00012528  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001f02  00000000  00000000  00012608  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000014e2  00000000  00000000  0001450a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000081cc  00000000  00000000  000159ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001dbb8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000350  00000000  00000000  0001dc34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000614 	.word	0x08000614

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000614 	.word	0x08000614

08000170 <HAL_Keypad_Init>:
 *      Author: Mustafa gaber
 */
#include "Keypad.h"
#include "LCD.h"
void HAL_Keypad_Init()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
	uint16_t i;
	i=InputIndex;
 8000176:	2300      	movs	r3, #0
 8000178:	80fb      	strh	r3, [r7, #6]
	for(i; i<InputIndex+4;i++)
 800017a:	e009      	b.n	8000190 <HAL_Keypad_Init+0x20>
		MCAL_GPIO_PinConfig(GPIO_Keypad, i,GPIO_PIN_INPUT,GPIO_PIN_INPUT_PD);
 800017c:	88fb      	ldrh	r3, [r7, #6]
 800017e:	b2d9      	uxtb	r1, r3
 8000180:	2302      	movs	r3, #2
 8000182:	2200      	movs	r2, #0
 8000184:	480e      	ldr	r0, [pc, #56]	; (80001c0 <HAL_Keypad_Init+0x50>)
 8000186:	f000 f990 	bl	80004aa <MCAL_GPIO_PinConfig>
	for(i; i<InputIndex+4;i++)
 800018a:	88fb      	ldrh	r3, [r7, #6]
 800018c:	3301      	adds	r3, #1
 800018e:	80fb      	strh	r3, [r7, #6]
 8000190:	88fb      	ldrh	r3, [r7, #6]
 8000192:	2b03      	cmp	r3, #3
 8000194:	d9f2      	bls.n	800017c <HAL_Keypad_Init+0xc>

	i=OutputIndex;
 8000196:	2304      	movs	r3, #4
 8000198:	80fb      	strh	r3, [r7, #6]
	for(i; i<OutputIndex+4;i++)
 800019a:	e009      	b.n	80001b0 <HAL_Keypad_Init+0x40>
		MCAL_GPIO_PinConfig(GPIO_Keypad, i, GPIO_PIN_OUTPUT_50M, GPIO_PIN_OUTPUT_G_PP);
 800019c:	88fb      	ldrh	r3, [r7, #6]
 800019e:	b2d9      	uxtb	r1, r3
 80001a0:	2300      	movs	r3, #0
 80001a2:	2203      	movs	r2, #3
 80001a4:	4806      	ldr	r0, [pc, #24]	; (80001c0 <HAL_Keypad_Init+0x50>)
 80001a6:	f000 f980 	bl	80004aa <MCAL_GPIO_PinConfig>
	for(i; i<OutputIndex+4;i++)
 80001aa:	88fb      	ldrh	r3, [r7, #6]
 80001ac:	3301      	adds	r3, #1
 80001ae:	80fb      	strh	r3, [r7, #6]
 80001b0:	88fb      	ldrh	r3, [r7, #6]
 80001b2:	2b07      	cmp	r3, #7
 80001b4:	d9f2      	bls.n	800019c <HAL_Keypad_Init+0x2c>
}
 80001b6:	bf00      	nop
 80001b8:	3708      	adds	r7, #8
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	40010c00 	.word	0x40010c00

080001c4 <HAL_Keypad_Get_Char>:
void HAL_Keypad_Get_Char()
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
	uint8_t i ,j;
	for (i=0;i<4;i++)
 80001ca:	2300      	movs	r3, #0
 80001cc:	71fb      	strb	r3, [r7, #7]
 80001ce:	e047      	b.n	8000260 <HAL_Keypad_Get_Char+0x9c>
	{
		GPIO_Keypad->ODR&=~(0xF<<OutputIndex);
 80001d0:	4b27      	ldr	r3, [pc, #156]	; (8000270 <HAL_Keypad_Get_Char+0xac>)
 80001d2:	68db      	ldr	r3, [r3, #12]
 80001d4:	4a26      	ldr	r2, [pc, #152]	; (8000270 <HAL_Keypad_Get_Char+0xac>)
 80001d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80001da:	60d3      	str	r3, [r2, #12]
		MCAL_GPIO_WritePin(GPIO_Keypad, OutputIndex+i, 1);
 80001dc:	79fb      	ldrb	r3, [r7, #7]
 80001de:	3304      	adds	r3, #4
 80001e0:	b2db      	uxtb	r3, r3
 80001e2:	2201      	movs	r2, #1
 80001e4:	4619      	mov	r1, r3
 80001e6:	4822      	ldr	r0, [pc, #136]	; (8000270 <HAL_Keypad_Get_Char+0xac>)
 80001e8:	f000 f9ba 	bl	8000560 <MCAL_GPIO_WritePin>
		for(j=0;j<4;j++)
 80001ec:	2300      	movs	r3, #0
 80001ee:	71bb      	strb	r3, [r7, #6]
 80001f0:	e030      	b.n	8000254 <HAL_Keypad_Get_Char+0x90>
		{
			if(MCAL_GPIO_ReadPin(GPIO_Keypad, InputIndex<<j))
 80001f2:	2100      	movs	r1, #0
 80001f4:	481e      	ldr	r0, [pc, #120]	; (8000270 <HAL_Keypad_Get_Char+0xac>)
 80001f6:	f000 f9d7 	bl	80005a8 <MCAL_GPIO_ReadPin>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d026      	beq.n	800024e <HAL_Keypad_Get_Char+0x8a>
			{
				switch(i)
 8000200:	79fb      	ldrb	r3, [r7, #7]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d11b      	bne.n	800023e <HAL_Keypad_Get_Char+0x7a>
				{
				case(0):if(j==0) HAL_LCD_WriteChar('9 ');
 8000206:	79bb      	ldrb	r3, [r7, #6]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d103      	bne.n	8000214 <HAL_Keypad_Get_Char+0x50>
 800020c:	2020      	movs	r0, #32
 800020e:	f000 f8b3 	bl	8000378 <HAL_LCD_WriteChar>
						else if(j==1) HAL_LCD_WriteChar('4');
						else if(j==2) HAL_LCD_WriteChar('1');
						else if(j==3) HAL_LCD_WriteChar('0');


					break;
 8000212:	e013      	b.n	800023c <HAL_Keypad_Get_Char+0x78>
						else if(j==1) HAL_LCD_WriteChar('4');
 8000214:	79bb      	ldrb	r3, [r7, #6]
 8000216:	2b01      	cmp	r3, #1
 8000218:	d103      	bne.n	8000222 <HAL_Keypad_Get_Char+0x5e>
 800021a:	2034      	movs	r0, #52	; 0x34
 800021c:	f000 f8ac 	bl	8000378 <HAL_LCD_WriteChar>
					break;
 8000220:	e00c      	b.n	800023c <HAL_Keypad_Get_Char+0x78>
						else if(j==2) HAL_LCD_WriteChar('1');
 8000222:	79bb      	ldrb	r3, [r7, #6]
 8000224:	2b02      	cmp	r3, #2
 8000226:	d103      	bne.n	8000230 <HAL_Keypad_Get_Char+0x6c>
 8000228:	2031      	movs	r0, #49	; 0x31
 800022a:	f000 f8a5 	bl	8000378 <HAL_LCD_WriteChar>
					break;
 800022e:	e005      	b.n	800023c <HAL_Keypad_Get_Char+0x78>
						else if(j==3) HAL_LCD_WriteChar('0');
 8000230:	79bb      	ldrb	r3, [r7, #6]
 8000232:	2b03      	cmp	r3, #3
 8000234:	d102      	bne.n	800023c <HAL_Keypad_Get_Char+0x78>
 8000236:	2030      	movs	r0, #48	; 0x30
 8000238:	f000 f89e 	bl	8000378 <HAL_LCD_WriteChar>
					break;
 800023c:	bf00      	nop
				}

			while(MCAL_GPIO_ReadPin(GPIO_Keypad, InputIndex<<j));
 800023e:	bf00      	nop
 8000240:	2100      	movs	r1, #0
 8000242:	480b      	ldr	r0, [pc, #44]	; (8000270 <HAL_Keypad_Get_Char+0xac>)
 8000244:	f000 f9b0 	bl	80005a8 <MCAL_GPIO_ReadPin>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d1f8      	bne.n	8000240 <HAL_Keypad_Get_Char+0x7c>
		for(j=0;j<4;j++)
 800024e:	79bb      	ldrb	r3, [r7, #6]
 8000250:	3301      	adds	r3, #1
 8000252:	71bb      	strb	r3, [r7, #6]
 8000254:	79bb      	ldrb	r3, [r7, #6]
 8000256:	2b03      	cmp	r3, #3
 8000258:	d9cb      	bls.n	80001f2 <HAL_Keypad_Get_Char+0x2e>
	for (i=0;i<4;i++)
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	3301      	adds	r3, #1
 800025e:	71fb      	strb	r3, [r7, #7]
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	2b03      	cmp	r3, #3
 8000264:	d9b4      	bls.n	80001d0 <HAL_Keypad_Get_Char+0xc>
			}

		}

	}
}
 8000266:	bf00      	nop
 8000268:	3708      	adds	r7, #8
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40010c00 	.word	0x40010c00

08000274 <Send>:
#include "time.h"
static uint8_t EnablePin=0;
static GPIO_typedef* GPIO;

void Send()
{ int i=0;
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	2300      	movs	r3, #0
 800027c:	607b      	str	r3, [r7, #4]
	while(i<500)
 800027e:	e002      	b.n	8000286 <Send+0x12>
		i++;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	3301      	adds	r3, #1
 8000284:	607b      	str	r3, [r7, #4]
	while(i<500)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800028c:	dbf8      	blt.n	8000280 <Send+0xc>
	GPIO->BSRR=(1<<EnablePin);
 800028e:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <Send+0x54>)
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	461a      	mov	r2, r3
 8000294:	2301      	movs	r3, #1
 8000296:	fa03 f202 	lsl.w	r2, r3, r2
 800029a:	4b0c      	ldr	r3, [pc, #48]	; (80002cc <Send+0x58>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	611a      	str	r2, [r3, #16]
	GPIO->BSRR=(1<<EnablePin<<16);
 80002a0:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <Send+0x54>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	461a      	mov	r2, r3
 80002a6:	2301      	movs	r3, #1
 80002a8:	4093      	lsls	r3, r2
 80002aa:	041a      	lsls	r2, r3, #16
 80002ac:	4b07      	ldr	r3, [pc, #28]	; (80002cc <Send+0x58>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	611a      	str	r2, [r3, #16]
	GPIO->BSRR=(0xFF)<<16;
 80002b2:	4b06      	ldr	r3, [pc, #24]	; (80002cc <Send+0x58>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80002ba:	611a      	str	r2, [r3, #16]
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	2000001c 	.word	0x2000001c
 80002cc:	20000020 	.word	0x20000020

080002d0 <HAL_LCD_Init>:

void HAL_LCD_Init(GPIO_typedef* GPIOx, uint8_t noPins,uint8_t En)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	460b      	mov	r3, r1
 80002da:	70fb      	strb	r3, [r7, #3]
 80002dc:	4613      	mov	r3, r2
 80002de:	70bb      	strb	r3, [r7, #2]
	EnablePin=En;
 80002e0:	4a10      	ldr	r2, [pc, #64]	; (8000324 <HAL_LCD_Init+0x54>)
 80002e2:	78bb      	ldrb	r3, [r7, #2]
 80002e4:	7013      	strb	r3, [r2, #0]
	GPIO=GPIOx;
 80002e6:	4a10      	ldr	r2, [pc, #64]	; (8000328 <HAL_LCD_Init+0x58>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	6013      	str	r3, [r2, #0]
	for(int i =0; i<noPins;i++)
 80002ec:	2300      	movs	r3, #0
 80002ee:	60fb      	str	r3, [r7, #12]
 80002f0:	e009      	b.n	8000306 <HAL_LCD_Init+0x36>
	MCAL_GPIO_PinConfig(GPIOx,i, GPIO_PIN_OUTPUT_10M,GPIO_PIN_OUTPUT_G_PP);
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	b2d9      	uxtb	r1, r3
 80002f6:	2300      	movs	r3, #0
 80002f8:	2201      	movs	r2, #1
 80002fa:	6878      	ldr	r0, [r7, #4]
 80002fc:	f000 f8d5 	bl	80004aa <MCAL_GPIO_PinConfig>
	for(int i =0; i<noPins;i++)
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	3301      	adds	r3, #1
 8000304:	60fb      	str	r3, [r7, #12]
 8000306:	78fb      	ldrb	r3, [r7, #3]
 8000308:	68fa      	ldr	r2, [r7, #12]
 800030a:	429a      	cmp	r2, r3
 800030c:	dbf1      	blt.n	80002f2 <HAL_LCD_Init+0x22>
	HAL_LCD_Cursor(CursorOn,BlinkCursor);
 800030e:	2101      	movs	r1, #1
 8000310:	2001      	movs	r0, #1
 8000312:	f000 f80b 	bl	800032c <HAL_LCD_Cursor>
	HAL_LCD_Clear();
 8000316:	f000 f823 	bl	8000360 <HAL_LCD_Clear>
}
 800031a:	bf00      	nop
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	2000001c 	.word	0x2000001c
 8000328:	20000020 	.word	0x20000020

0800032c <HAL_LCD_Cursor>:
{
	GPIO->ODR=(0x008|(OnOFF<<2));
	Send();
}
void HAL_LCD_Cursor(uint8_t OnOFF,uint8_t Blink)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
 8000332:	4603      	mov	r3, r0
 8000334:	460a      	mov	r2, r1
 8000336:	71fb      	strb	r3, [r7, #7]
 8000338:	4613      	mov	r3, r2
 800033a:	71bb      	strb	r3, [r7, #6]
	GPIO->ODR=(0x00C|(OnOFF<<1)|Blink);
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	f043 020c 	orr.w	r2, r3, #12
 8000344:	79bb      	ldrb	r3, [r7, #6]
 8000346:	431a      	orrs	r2, r3
 8000348:	4b04      	ldr	r3, [pc, #16]	; (800035c <HAL_LCD_Cursor+0x30>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	60da      	str	r2, [r3, #12]
	Send();
 800034e:	f7ff ff91 	bl	8000274 <Send>

}
 8000352:	bf00      	nop
 8000354:	3708      	adds	r7, #8
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	20000020 	.word	0x20000020

08000360 <HAL_LCD_Clear>:
void HAL_LCD_Clear()
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	GPIO->ODR=1;
 8000364:	4b03      	ldr	r3, [pc, #12]	; (8000374 <HAL_LCD_Clear+0x14>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2201      	movs	r2, #1
 800036a:	60da      	str	r2, [r3, #12]
	Send();
 800036c:	f7ff ff82 	bl	8000274 <Send>
}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}
 8000374:	20000020 	.word	0x20000020

08000378 <HAL_LCD_WriteChar>:
void HAL_LCD_WriteChar(uint8_t character)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]
	GPIO->ODR=(0x200|character);
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000388:	4b04      	ldr	r3, [pc, #16]	; (800039c <HAL_LCD_WriteChar+0x24>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	60da      	str	r2, [r3, #12]
	Send();
 800038e:	f7ff ff71 	bl	8000274 <Send>
}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000020 	.word	0x20000020

080003a0 <HAL_LCD_WriteString>:
void HAL_LCD_WriteString(char* str)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
	int i = 0 ;
 80003a8:	2300      	movs	r3, #0
 80003aa:	60fb      	str	r3, [r7, #12]
	while(str[i]!='\0')
 80003ac:	e009      	b.n	80003c2 <HAL_LCD_WriteString+0x22>
	HAL_LCD_WriteChar(str[i++]);
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	1c5a      	adds	r2, r3, #1
 80003b2:	60fa      	str	r2, [r7, #12]
 80003b4:	461a      	mov	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4413      	add	r3, r2
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f7ff ffdb 	bl	8000378 <HAL_LCD_WriteChar>
	while(str[i]!='\0')
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	4413      	add	r3, r2
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d1ef      	bne.n	80003ae <HAL_LCD_WriteString+0xe>

}
 80003ce:	bf00      	nop
 80003d0:	3710      	adds	r7, #16
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
	...

080003d8 <HAL_LCD_CursorPosition>:
{
	GPIO->ODR=(0x010|CursorOrDisplayShift<<3|ShiftDirection<<2);
		Send();
}
void HAL_LCD_CursorPosition(uint8_t CursorPos) // from 0 to 80
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	71fb      	strb	r3, [r7, #7]
	GPIO->ODR=(0x080|CursorPos);
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80003e8:	b2da      	uxtb	r2, r3
 80003ea:	4b04      	ldr	r3, [pc, #16]	; (80003fc <HAL_LCD_CursorPosition+0x24>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	60da      	str	r2, [r3, #12]
	Send();
 80003f0:	f7ff ff40 	bl	8000274 <Send>

}
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000020 	.word	0x20000020

08000400 <main>:
#include "GPIO_header.h"
#include "stm32f103xx.h"
#include "Keypad.h"
#include "LCD.h"
int main(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000404:	4b10      	ldr	r3, [pc, #64]	; (8000448 <main+0x48>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a0f      	ldr	r2, [pc, #60]	; (8000448 <main+0x48>)
 800040a:	f043 0304 	orr.w	r3, r3, #4
 800040e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000410:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <main+0x48>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a0c      	ldr	r2, [pc, #48]	; (8000448 <main+0x48>)
 8000416:	f043 0308 	orr.w	r3, r3, #8
 800041a:	6193      	str	r3, [r2, #24]
	HAL_LCD_Init(GPIOA, 11,10);
 800041c:	220a      	movs	r2, #10
 800041e:	210b      	movs	r1, #11
 8000420:	480a      	ldr	r0, [pc, #40]	; (800044c <main+0x4c>)
 8000422:	f7ff ff55 	bl	80002d0 <HAL_LCD_Init>
	MCAL_GPIO_PinConfig(GPIOB, 0, GPIO_PIN_INPUT, GPIO_PIN_INPUT_F);
 8000426:	2301      	movs	r3, #1
 8000428:	2200      	movs	r2, #0
 800042a:	2100      	movs	r1, #0
 800042c:	4808      	ldr	r0, [pc, #32]	; (8000450 <main+0x50>)
 800042e:	f000 f83c 	bl	80004aa <MCAL_GPIO_PinConfig>
	HAL_LCD_CursorPosition(0x40);
 8000432:	2040      	movs	r0, #64	; 0x40
 8000434:	f7ff ffd0 	bl	80003d8 <HAL_LCD_CursorPosition>
	HAL_LCD_WriteString("Karim");
 8000438:	4806      	ldr	r0, [pc, #24]	; (8000454 <main+0x54>)
 800043a:	f7ff ffb1 	bl	80003a0 <HAL_LCD_WriteString>
	HAL_Keypad_Init();
 800043e:	f7ff fe97 	bl	8000170 <HAL_Keypad_Init>
	while(1)
	{
		HAL_Keypad_Get_Char();
 8000442:	f7ff febf 	bl	80001c4 <HAL_Keypad_Get_Char>
 8000446:	e7fc      	b.n	8000442 <main+0x42>
 8000448:	40021000 	.word	0x40021000
 800044c:	40010800 	.word	0x40010800
 8000450:	40010c00 	.word	0x40010c00
 8000454:	0800062c 	.word	0x0800062c

08000458 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000458:	480d      	ldr	r0, [pc, #52]	; (8000490 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800045a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800045c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000460:	480c      	ldr	r0, [pc, #48]	; (8000494 <LoopForever+0x6>)
  ldr r1, =_edata
 8000462:	490d      	ldr	r1, [pc, #52]	; (8000498 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000464:	4a0d      	ldr	r2, [pc, #52]	; (800049c <LoopForever+0xe>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000468:	e002      	b.n	8000470 <LoopCopyDataInit>

0800046a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800046a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800046c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800046e:	3304      	adds	r3, #4

08000470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000474:	d3f9      	bcc.n	800046a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000476:	4a0a      	ldr	r2, [pc, #40]	; (80004a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000478:	4c0a      	ldr	r4, [pc, #40]	; (80004a4 <LoopForever+0x16>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800047c:	e001      	b.n	8000482 <LoopFillZerobss>

0800047e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800047e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000480:	3204      	adds	r2, #4

08000482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000484:	d3fb      	bcc.n	800047e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000486:	f000 f8a1 	bl	80005cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800048a:	f7ff ffb9 	bl	8000400 <main>

0800048e <LoopForever>:

LoopForever:
    b LoopForever
 800048e:	e7fe      	b.n	800048e <LoopForever>
  ldr   r0, =_estack
 8000490:	20001800 	.word	0x20001800
  ldr r0, =_sdata
 8000494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000498:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800049c:	0800063c 	.word	0x0800063c
  ldr r2, =_sbss
 80004a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004a4:	20000024 	.word	0x20000024

080004a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004a8:	e7fe      	b.n	80004a8 <ADC1_2_IRQHandler>

080004aa <MCAL_GPIO_PinConfig>:
* @param [out] - void
* @retval -
* Note-
*/
void MCAL_GPIO_PinConfig(GPIO_typedef* GPIOx,uint8_t PinNumber,uint8_t PinMode, uint8_t PinConfig)
{
 80004aa:	b480      	push	{r7}
 80004ac:	b085      	sub	sp, #20
 80004ae:	af00      	add	r7, sp, #0
 80004b0:	6078      	str	r0, [r7, #4]
 80004b2:	4608      	mov	r0, r1
 80004b4:	4611      	mov	r1, r2
 80004b6:	461a      	mov	r2, r3
 80004b8:	4603      	mov	r3, r0
 80004ba:	70fb      	strb	r3, [r7, #3]
 80004bc:	460b      	mov	r3, r1
 80004be:	70bb      	strb	r3, [r7, #2]
 80004c0:	4613      	mov	r3, r2
 80004c2:	707b      	strb	r3, [r7, #1]
uint32_t* CRLH ;
uint8_t Higher8=0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	72fb      	strb	r3, [r7, #11]
if(PinNumber < GPIO_Pin_8)
 80004c8:	78fb      	ldrb	r3, [r7, #3]
 80004ca:	2b07      	cmp	r3, #7
 80004cc:	d802      	bhi.n	80004d4 <MCAL_GPIO_PinConfig+0x2a>
	{
		CRLH=&GPIOx->CRL;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	e007      	b.n	80004e4 <MCAL_GPIO_PinConfig+0x3a>
	}
	else
	{
	    CRLH=&GPIOx->CRH;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	3304      	adds	r3, #4
 80004d8:	60fb      	str	r3, [r7, #12]
	    PinNumber=PinNumber-(uint8_t)8;
 80004da:	78fb      	ldrb	r3, [r7, #3]
 80004dc:	3b08      	subs	r3, #8
 80004de:	70fb      	strb	r3, [r7, #3]
	    Higher8=1;
 80004e0:	2301      	movs	r3, #1
 80004e2:	72fb      	strb	r3, [r7, #11]
	}

	*CRLH&=(~((0xF)<<(PinNumber*4)));
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	78fa      	ldrb	r2, [r7, #3]
 80004ea:	0092      	lsls	r2, r2, #2
 80004ec:	210f      	movs	r1, #15
 80004ee:	fa01 f202 	lsl.w	r2, r1, r2
 80004f2:	43d2      	mvns	r2, r2
 80004f4:	401a      	ands	r2, r3
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	601a      	str	r2, [r3, #0]

if(PinMode==GPIO_PIN_INPUT && PinConfig==GPIO_PIN_INPUT_PU)
 80004fa:	78bb      	ldrb	r3, [r7, #2]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d11d      	bne.n	800053c <MCAL_GPIO_PinConfig+0x92>
 8000500:	787b      	ldrb	r3, [r7, #1]
 8000502:	2b03      	cmp	r3, #3
 8000504:	d11a      	bne.n	800053c <MCAL_GPIO_PinConfig+0x92>
		 {
			 *CRLH|=((GPIO_PIN_INPUT_PD<<2)|(PinMode))<<(PinNumber*4);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	78ba      	ldrb	r2, [r7, #2]
 800050c:	f042 0208 	orr.w	r2, r2, #8
 8000510:	b2d2      	uxtb	r2, r2
 8000512:	4611      	mov	r1, r2
 8000514:	78fa      	ldrb	r2, [r7, #3]
 8000516:	0092      	lsls	r2, r2, #2
 8000518:	fa01 f202 	lsl.w	r2, r1, r2
 800051c:	431a      	orrs	r2, r3
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	601a      	str	r2, [r3, #0]
			 GPIOx->ODR|=(1<<(PinNumber+8*(Higher8)));
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	68db      	ldr	r3, [r3, #12]
 8000526:	78f9      	ldrb	r1, [r7, #3]
 8000528:	7afa      	ldrb	r2, [r7, #11]
 800052a:	00d2      	lsls	r2, r2, #3
 800052c:	440a      	add	r2, r1
 800052e:	2101      	movs	r1, #1
 8000530:	fa01 f202 	lsl.w	r2, r1, r2
 8000534:	431a      	orrs	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	e00c      	b.n	8000556 <MCAL_GPIO_PinConfig+0xac>
		 }
	 else
	 {
		 *CRLH|=((PinConfig<<2)|(PinMode))<<PinNumber*4;
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	787a      	ldrb	r2, [r7, #1]
 8000542:	0091      	lsls	r1, r2, #2
 8000544:	78ba      	ldrb	r2, [r7, #2]
 8000546:	4311      	orrs	r1, r2
 8000548:	78fa      	ldrb	r2, [r7, #3]
 800054a:	0092      	lsls	r2, r2, #2
 800054c:	fa01 f202 	lsl.w	r2, r1, r2
 8000550:	431a      	orrs	r2, r3
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	601a      	str	r2, [r3, #0]
	 }
}
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr

08000560 <MCAL_GPIO_WritePin>:
		GPIOx->CRL=0x44444444;
		GPIOx->CRH=0x44444444;
		GPIOx->ODR=0;
}
void MCAL_GPIO_WritePin(GPIO_typedef* GPIOx,uint8_t PinNumber, uint8_t value)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	460b      	mov	r3, r1
 800056a:	70fb      	strb	r3, [r7, #3]
 800056c:	4613      	mov	r3, r2
 800056e:	70bb      	strb	r3, [r7, #2]
	if(value==0)
 8000570:	78bb      	ldrb	r3, [r7, #2]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d10a      	bne.n	800058c <MCAL_GPIO_WritePin+0x2c>
	    GPIOx->ODR&=~(1<<PinNumber);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	78fa      	ldrb	r2, [r7, #3]
 800057c:	2101      	movs	r1, #1
 800057e:	fa01 f202 	lsl.w	r2, r1, r2
 8000582:	43d2      	mvns	r2, r2
 8000584:	401a      	ands	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	60da      	str	r2, [r3, #12]
		else GPIOx->ODR|=(1<<PinNumber);
}
 800058a:	e008      	b.n	800059e <MCAL_GPIO_WritePin+0x3e>
		else GPIOx->ODR|=(1<<PinNumber);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	78fa      	ldrb	r2, [r7, #3]
 8000592:	2101      	movs	r1, #1
 8000594:	fa01 f202 	lsl.w	r2, r1, r2
 8000598:	431a      	orrs	r2, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	60da      	str	r2, [r3, #12]
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <MCAL_GPIO_ReadPin>:
void MCAL_GPIO_WritePort(GPIO_typedef* GPIOx, uint16_t value)
{
GPIOx->ODR=value;
}
uint32_t MCAL_GPIO_ReadPin(GPIO_typedef* GPIOx,uint8_t PinNumber)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	460b      	mov	r3, r1
 80005b2:	70fb      	strb	r3, [r7, #3]
	return ((GPIOx->IDR)>>PinNumber&1);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	689a      	ldr	r2, [r3, #8]
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	fa22 f303 	lsr.w	r3, r2, r3
 80005be:	f003 0301 	and.w	r3, r3, #1
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <__libc_init_array>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	2500      	movs	r5, #0
 80005d0:	4e0c      	ldr	r6, [pc, #48]	; (8000604 <__libc_init_array+0x38>)
 80005d2:	4c0d      	ldr	r4, [pc, #52]	; (8000608 <__libc_init_array+0x3c>)
 80005d4:	1ba4      	subs	r4, r4, r6
 80005d6:	10a4      	asrs	r4, r4, #2
 80005d8:	42a5      	cmp	r5, r4
 80005da:	d109      	bne.n	80005f0 <__libc_init_array+0x24>
 80005dc:	f000 f81a 	bl	8000614 <_init>
 80005e0:	2500      	movs	r5, #0
 80005e2:	4e0a      	ldr	r6, [pc, #40]	; (800060c <__libc_init_array+0x40>)
 80005e4:	4c0a      	ldr	r4, [pc, #40]	; (8000610 <__libc_init_array+0x44>)
 80005e6:	1ba4      	subs	r4, r4, r6
 80005e8:	10a4      	asrs	r4, r4, #2
 80005ea:	42a5      	cmp	r5, r4
 80005ec:	d105      	bne.n	80005fa <__libc_init_array+0x2e>
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005f4:	4798      	blx	r3
 80005f6:	3501      	adds	r5, #1
 80005f8:	e7ee      	b.n	80005d8 <__libc_init_array+0xc>
 80005fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005fe:	4798      	blx	r3
 8000600:	3501      	adds	r5, #1
 8000602:	e7f2      	b.n	80005ea <__libc_init_array+0x1e>
 8000604:	08000634 	.word	0x08000634
 8000608:	08000634 	.word	0x08000634
 800060c:	08000634 	.word	0x08000634
 8000610:	08000638 	.word	0x08000638

08000614 <_init>:
 8000614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000616:	bf00      	nop
 8000618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800061a:	bc08      	pop	{r3}
 800061c:	469e      	mov	lr, r3
 800061e:	4770      	bx	lr

08000620 <_fini>:
 8000620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000622:	bf00      	nop
 8000624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000626:	bc08      	pop	{r3}
 8000628:	469e      	mov	lr, r3
 800062a:	4770      	bx	lr
